[{"title":"打造自己的 dns 记录服务","date":"2021-12-12T14:44:48.000Z","url":"/2021/12/12/dns-log-server/","tags":[["dns","/tags/dns/"],["log4j","/tags/log4j/"]],"categories":[[" ",""]],"content":"2021年12月9日，Apache Log4j2 爆出核弹级漏洞，该漏洞可以远程代码执行，一旦被攻击者利用，将造成严重危害。各大公司均连夜进行应急处理和推送业务修复。 在漏洞处理和修复过程中，有个 dnslog 被广泛提及，主要是用于严重业务是否存在漏洞，代码或者命令是否真实执行，因为其使用 dns 查询请求的 payload 在受影响的用户端执行，dnslog 服务端记录 dns 请求，也被叫 dns 回显平台。 这里，我们使用 go 开发一个 dns 记录服务，帮助业务快速自查风险。 首先，定义一个 DNS 结构，用于存储真实服务解析。 绑定端口进行 udp 数据解析, 我们通过 dns 相关信息知道，dns 请求数据最长为 512 字节： 接着解包 dns 数据，这里需要使用到包 golang.org/x/net/dns/dnsmessage 。 在处理的时候，我们首先梳理下，需要做哪些事情： 拿到 client ip，用于定位哪个服务发起了这个域名的 dns 查询。 正常返回 dns 结果，主要为 A 记录和 AAAA 记录。 记录查询请求的域名信息、类型信息、clientip 进行存储。 那我们开始吧，先拿到client ip: 接着让正常请求能够返回，获取请求类型，判断是否是 A 或者 AAAA ，根据类型进行处理： 我们来试试： 使用 dig 进行验证： 我们看到，111.www.baidu.com 的 A 记录已经被正常的解析到了 1.1.1.1 这个 ip 地址。 下面来搞定 AAAA 记录： 这样服务就已经的对域名的 A 和 AAAA 记录了： 后续只需要进行 dns 记录的存储和查询。在公司内部，也可以将 dnslog 的请求，全部转发到该服务，即可感知到所有被外部检查的存在漏洞的服务了。同时提供查询和删除的管理界面，也能给业务进行自查，帮助业务更快的修复安全漏洞。 最后，祈福永无BUG，无安全漏洞！！！"},{"title":"go get 时出现 SSL certificate problem","date":"2021-12-12T02:40:01.000Z","url":"/2021/12/12/go-get-ssl-certificate-problem/","tags":[["go","/tags/go/"],["git","/tags/git/"]],"categories":[[" ",""]],"content":"使用 go get 下载依赖时，出现 SSL certificate problem: certificate has expired 错误： 这是该模块所在服务端使用的 https 证书问题，certificate has expired 是证书已经过期，类似的错误还有 Invalid 无效证书等。可以通过设置不进行证书验证： 另外，也可以通过查找该模块是否有 github 的托管，通过 github 的地址拉取，例如 gopkg.in/ini.v1 模块在 github 上的仓库为 github.com/go-ini/ini 。可以通过 go get github.com/go-ini/ini 获取。"},{"title":"利用github分支同步博客代码，方便不同机器上更新博客","date":"2018-05-13T06:51:29.000Z","url":"/2018/05/13/hexo-blog-sync-git-branch/","tags":[["hexo","/tags/hexo/"],["github","/tags/github/"]],"categories":[[" ",""]],"content":"使用github搭建博客后，每次更新需要在原来的代码基础上更新。如果在其他个人电脑上，没有原来的代码，则无法立即同步更新博客。这时候我们可以选择将代码push到一些代码服务器上，但是我们这里可以这么做。首先，我们先对github中博客的代码仓库建立一个新的分支hexo_code，并设置代码库的Branches-&gt;Default branches为新建的分支hexo_code。克隆代码库到本地: 将博客代码全部拷贝到page.github.com.git目录, 如果themes不是使用的默认的theme。则需要删除掉该主题目录中的.git目录。这时我们就可以把当前目录全部推送到github的新branches了。 这样我们在其他的电脑上，只需要clone代码(记得添加ssh key)，并在目录中执行npm install。之后就能按照正常的操作更新博客了。 done. "},{"title":"使用user账号登录docker容器","date":"2018-05-13T05:30:49.000Z","url":"/2018/05/13/docker-run-in-user/","tags":[["Docker","/tags/Docker/"]],"categories":[[" ",""]],"content":"平时工作中，使用docker容器时，均使用的root账号登录。但是有时候，你需要使用其他的账号，部署一些需要权限限制的服务，例如nginx。使用下列步骤即可完成使用普通用户登录docker。第一步，启动你的容器并以root进入，创建一个work账号： 第二步，为用户设置登录密码： 第三步，设置用户主目录，由于之前使用的root创建的/home/work，这时候登录会有问题。 这时候就可以使用work账号进行登录。 "},{"date":"2021-11-21T13:19:41.000Z","url":"/search/index.html","categories":[[" ",""]]},{"date":"2021-11-21T13:19:33.000Z","url":"/links/index.html","categories":[[" ",""]]},{"date":"2021-11-21T13:19:44.000Z","url":"/tags/index.html","categories":[[" ",""]]},{"date":"2021-11-21T13:19:46.000Z","url":"/404/index.html","categories":[[" ",""]],"content":" 404 true "}]